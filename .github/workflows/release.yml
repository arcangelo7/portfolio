name: Release

on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  check-release-trigger:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      commit-message: ${{ steps.check.outputs.commit-message }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for release trigger
      id: check
      run: |
        # Ottieni il messaggio del commit piÃ¹ recente
        COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.event.workflow_run.head_sha }})
        echo "commit-message=$COMMIT_MSG" >> $GITHUB_OUTPUT
        echo "Commit message: $COMMIT_MSG"
        
        # Controlla se contiene [release] tra parentesi quadre
        if [[ "$COMMIT_MSG" =~ \[release\] ]]; then
          echo "Release trigger found in commit message"
          echo "should-release=true" >> $GITHUB_OUTPUT
        else
          echo "No release trigger found"
          echo "should-release=false" >> $GITHUB_OUTPUT
        fi

  release:
    runs-on: ubuntu-latest
    needs: check-release-trigger
    if: needs.check-release-trigger.outputs.should-release == 'true'
    outputs:
      version: ${{ steps.semantic.outputs.new-release-version }}
      released: ${{ steps.semantic.outputs.new-release-published }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install semantic-release
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github
    
    - name: Run semantic-release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx semantic-release --dry-run=false

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [check-release-trigger, release]
    if: needs.check-release-trigger.outputs.should-release == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.2'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Determine version
      id: version
      run: |
        # Usa la versione da semantic-release se disponibile, altrimenti crea una versione fallback
        if [ -n "${{ needs.release.outputs.version }}" ] && [ "${{ needs.release.outputs.version }}" != "" ]; then
          VERSION="${{ needs.release.outputs.version }}"
          echo "Using semantic-release version: $VERSION"
        else
          # Fallback: usa data + commit SHA abbreviato
          VERSION="$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "Using fallback version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Update pubspec.yaml version
      run: |
        # Aggiorna la versione nel pubspec.yaml
        sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}+${{ github.run_number }}/" pubspec.yaml
        echo "Updated pubspec.yaml to version ${{ steps.version.outputs.version }}+${{ github.run_number }}"
    
    - name: Install Linux dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
    
    - name: Setup Java for Android
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Enable Linux desktop
      run: flutter config --enable-linux-desktop
    
    - name: Build web release
      run: |
        flutter build web --release --base-href /portfolio/ --dart-define=FLUTTER_WEB_CANVASKIT_URL=https://www.gstatic.com/flutter-canvaskit/
        cd build/web
        zip -r ../../portfolio-web-${{ steps.version.outputs.version }}.zip .
        cd ../..
    
    - name: Build Linux release
      run: |
        flutter build linux --release
        cd build/linux/x64/release/bundle
        tar -czf ../../../../../portfolio-linux-${{ steps.version.outputs.version }}.tar.gz .
        cd ../../../../../
    
    - name: Build Android APK
      run: |
        flutter build apk --release
        mv build/app/outputs/flutter-apk/app-release.apk portfolio-android-${{ steps.version.outputs.version }}.apk
    
    - name: Create release body
      run: |
        if [ -f "CHANGELOG.md" ] && [ -n "${{ needs.release.outputs.version }}" ]; then
          echo "Using CHANGELOG.md from semantic-release"
          echo "body_path=CHANGELOG.md" >> $GITHUB_ENV
        else
          echo "Creating fallback release notes"
          echo "Portfolio release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "ðŸš€ **Release manually triggered with [release] tag**" >> release_notes.md
          echo "" >> release_notes.md
          echo "ðŸ“± **Builds included:**" >> release_notes.md
          echo "- Android APK" >> release_notes.md
          echo "- Web build" >> release_notes.md
          echo "- Linux build" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Commit:** ${{ github.sha }}" >> release_notes.md
          echo "**Commit message:** ${{ needs.check-release-trigger.outputs.commit-message }}" >> release_notes.md
          echo "body_path=release_notes.md" >> $GITHUB_ENV
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body_path: ${{ env.body_path }}
        files: |
          portfolio-web-${{ steps.version.outputs.version }}.zip
          portfolio-linux-${{ steps.version.outputs.version }}.tar.gz
          portfolio-android-${{ steps.version.outputs.version }}.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup artifacts
      run: |
        rm -f portfolio-web-${{ steps.version.outputs.version }}.zip
        rm -f portfolio-linux-${{ steps.version.outputs.version }}.tar.gz
        rm -f portfolio-android-${{ steps.version.outputs.version }}.apk
        rm -f release_notes.md