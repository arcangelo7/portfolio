name: Release

on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  check-release-trigger:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      commit-message: ${{ steps.check.outputs.commit-message }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for release trigger
      id: check
      run: |
        # Ottieni il messaggio del commit pi√π recente
        COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.event.workflow_run.head_sha }})

        # Use heredoc syntax for multiline output to avoid parsing issues
        {
          echo "commit-message<<EOF"
          echo "$COMMIT_MSG"
          echo "EOF"
        } >> $GITHUB_OUTPUT

        echo "Commit message: $COMMIT_MSG"

        # Controlla se contiene [release] tra parentesi quadre
        if [[ "$COMMIT_MSG" =~ \[release\] ]]; then
          echo "Release trigger found in commit message"
          echo "should-release=true" >> $GITHUB_OUTPUT
        else
          echo "No release trigger found"
          echo "should-release=false" >> $GITHUB_OUTPUT
        fi

  release:
    runs-on: ubuntu-latest
    needs: check-release-trigger
    if: needs.check-release-trigger.outputs.should-release == 'true'
    outputs:
      version: ${{ steps.semantic.outputs.new-release-version }}
      released: ${{ steps.semantic.outputs.new-release-published }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install semantic-release
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github
    
    - name: Run semantic-release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx semantic-release --dry-run=false > semantic-output.txt 2>&1
        cat semantic-output.txt
        
        # Extract version from semantic-release output
        if grep -q "Published release" semantic-output.txt; then
          VERSION=$(grep "Published release" semantic-output.txt | sed -n 's/.*Published release \([0-9.]*\).*/\1/p')
          echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
          echo "new-release-published=true" >> $GITHUB_OUTPUT
          echo "Semantic-release published version: $VERSION"
        else
          echo "new-release-published=false" >> $GITHUB_OUTPUT
          echo "No release published"
        fi

  update-manifest:
    runs-on: ubuntu-latest
    needs: [check-release-trigger, release]
    if: needs.check-release-trigger.outputs.should-release == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Determine version
      id: version
      run: |
        if [ -n "${{ needs.release.outputs.version }}" ] && [ "${{ needs.release.outputs.version }}" != "" ]; then
          VERSION="${{ needs.release.outputs.version }}"
          echo "Using semantic-release version: $VERSION"
        else
          VERSION="$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "Using fallback version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Update manifest.json version
      run: |
        # Update version in web/manifest.json to force PWA cache invalidation
        sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${{ steps.version.outputs.version }}\"/" web/manifest.json
        # Also update name to include version for better cache busting
        sed -i "s/\"name\": \"Arcangelo Massari - Portfolio\"/\"name\": \"Arcangelo Massari - Portfolio v${{ steps.version.outputs.version }}\"/" web/manifest.json
        echo "Updated web/manifest.json to version ${{ steps.version.outputs.version }}"
    
    - name: Commit manifest.json changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add web/manifest.json
        git commit -m "chore: update manifest.json version to ${{ steps.version.outputs.version }} [skip ci]" || echo "No changes to commit"
        git push

  build-web-linux-android:
    runs-on: ubuntu-latest
    needs: [check-release-trigger, release, update-manifest]
    if: needs.check-release-trigger.outputs.should-release == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.8'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Determine version
      id: version
      run: |
        # Use semantic-release version if available, otherwise create fallback version
        if [ -n "${{ needs.release.outputs.version }}" ] && [ "${{ needs.release.outputs.version }}" != "" ]; then
          VERSION="${{ needs.release.outputs.version }}"
          echo "Using semantic-release version: $VERSION"
        else
          # Fallback: use date + short commit SHA
          VERSION="$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "Using fallback version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Update pubspec.yaml version
      run: |
        # Update version in pubspec.yaml
        sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}+${{ github.run_number }}/" pubspec.yaml
        echo "Updated pubspec.yaml to version ${{ steps.version.outputs.version }}+${{ github.run_number }}"
    
    - name: Install Linux dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
    
    - name: Setup Java for Android
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Enable Linux desktop
      run: flutter config --enable-linux-desktop
    
    - name: Build web release
      run: |
        flutter build web --release --base-href /portfolio/
        cd build/web
        zip -r ../../portfolio-web-${{ steps.version.outputs.version }}.zip .
        cd ../..
        # Create fixed-name copy for direct links
        cp portfolio-web-${{ steps.version.outputs.version }}.zip portfolio-web-latest.zip
    
    - name: Build Linux release
      run: |
        flutter build linux --release
        
        mkdir -p linux-package
        
        cp -r build/linux/x64/release/bundle/* linux-package/
        
        cp linux/install.sh linux-package/
        cp linux/uninstall.sh linux-package/
        
        chmod +x linux-package/install.sh
        chmod +x linux-package/uninstall.sh
        chmod +x linux-package/portfolio
        
        cd linux-package
        tar -czf ../portfolio-linux-${{ steps.version.outputs.version }}.tar.gz .
        cd ..
        
        cp portfolio-linux-${{ steps.version.outputs.version }}.tar.gz portfolio-linux-latest.tar.gz
        
        rm -rf linux-package
    
    - name: Build Android APK
      run: |
        flutter build apk --release
        mv build/app/outputs/flutter-apk/app-release.apk portfolio-android-${{ steps.version.outputs.version }}.apk
        # Create fixed-name copy for direct links
        cp portfolio-android-${{ steps.version.outputs.version }}.apk portfolio-android-latest.apk
    
    - name: Create release body
      run: |
        if [ -f "CHANGELOG.md" ] && [ -n "${{ needs.release.outputs.version }}" ]; then
          echo "Using CHANGELOG.md from semantic-release"
          echo "body_path=CHANGELOG.md" >> $GITHUB_ENV
        else
          echo "Creating fallback release notes"
          echo "Portfolio release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "üì± **Builds included:**" >> release_notes.md
          echo "- Android APK" >> release_notes.md
          echo "- Web build" >> release_notes.md
          echo "- Linux build" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Commit:** ${{ github.sha }}" >> release_notes.md
          echo "**Commit message:** ${{ needs.check-release-trigger.outputs.commit-message }}" >> release_notes.md
          echo "body_path=release_notes.md" >> $GITHUB_ENV
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body_path: ${{ env.body_path }}
        files: |
          portfolio-web-${{ steps.version.outputs.version }}.zip
          portfolio-linux-${{ steps.version.outputs.version }}.tar.gz
          portfolio-android-${{ steps.version.outputs.version }}.apk
          portfolio-web-latest.zip
          portfolio-linux-latest.tar.gz
          portfolio-android-latest.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload artifacts for multi-platform release
      uses: actions/upload-artifact@v4
      with:
        name: web-linux-android-builds
        path: |
          portfolio-web-${{ steps.version.outputs.version }}.zip
          portfolio-linux-${{ steps.version.outputs.version }}.tar.gz
          portfolio-android-${{ steps.version.outputs.version }}.apk
          portfolio-web-latest.zip
          portfolio-linux-latest.tar.gz
          portfolio-android-latest.apk
        retention-days: 1

  build-windows:
    runs-on: windows-latest
    needs: [check-release-trigger, release, update-manifest]
    if: needs.check-release-trigger.outputs.should-release == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.8'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Determine version
      id: version
      shell: bash
      run: |
        if [ -n "${{ needs.release.outputs.version }}" ] && [ "${{ needs.release.outputs.version }}" != "" ]; then
          VERSION="${{ needs.release.outputs.version }}"
          echo "Using semantic-release version: $VERSION"
        else
          VERSION="$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "Using fallback version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Update pubspec.yaml version
      shell: bash
      run: |
        sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}+${{ github.run_number }}/" pubspec.yaml
        echo "Updated pubspec.yaml to version ${{ steps.version.outputs.version }}+${{ github.run_number }}"
    
    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop
    
    - name: Build Windows release
      run: |
        flutter build windows --release
        Compress-Archive -Path "build/windows/x64/runner/Release/*" -DestinationPath "portfolio-windows-${{ steps.version.outputs.version }}.zip"
        Copy-Item "portfolio-windows-${{ steps.version.outputs.version }}.zip" -Destination "portfolio-windows-latest.zip"
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          portfolio-windows-${{ steps.version.outputs.version }}.zip
          portfolio-windows-latest.zip
        retention-days: 1

  build-macos-ios:
    runs-on: macos-latest
    needs: [check-release-trigger, release, update-manifest]
    if: needs.check-release-trigger.outputs.should-release == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.8'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Determine version
      id: version
      run: |
        if [ -n "${{ needs.release.outputs.version }}" ] && [ "${{ needs.release.outputs.version }}" != "" ]; then
          VERSION="${{ needs.release.outputs.version }}"
          echo "Using semantic-release version: $VERSION"
        else
          VERSION="$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "Using fallback version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Update pubspec.yaml version
      run: |
        sed -i '' "s/^version: .*/version: ${{ steps.version.outputs.version }}+${{ github.run_number }}/" pubspec.yaml
        echo "Updated pubspec.yaml to version ${{ steps.version.outputs.version }}+${{ github.run_number }}"
    
    - name: Enable macOS desktop
      run: flutter config --enable-macos-desktop
    
    - name: Build macOS release
      run: |
        flutter build macos --release
        cd build/macos/Build/Products/Release
        tar -czf ../../../../../portfolio-macos-${{ steps.version.outputs.version }}.tar.gz portfolio.app
        cd ../../../../../
        cp portfolio-macos-${{ steps.version.outputs.version }}.tar.gz portfolio-macos-latest.tar.gz
    
    - name: Build iOS release
      run: |
        flutter build ios --release --no-codesign
        cd build/ios/iphoneos
        mkdir -p Payload
        cp -r Runner.app Payload/
        zip -r ../../../portfolio-ios-${{ steps.version.outputs.version }}.ipa Payload/
        cd ../../..
        cp portfolio-ios-${{ steps.version.outputs.version }}.ipa portfolio-ios-latest.ipa
    
    - name: Upload macOS and iOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-ios-builds
        path: |
          portfolio-macos-${{ steps.version.outputs.version }}.tar.gz
          portfolio-macos-latest.tar.gz
          portfolio-ios-${{ steps.version.outputs.version }}.ipa
          portfolio-ios-latest.ipa
        retention-days: 1

  create-release:
    runs-on: ubuntu-latest
    needs: [check-release-trigger, release, update-manifest, build-web-linux-android, build-windows, build-macos-ios]
    if: needs.check-release-trigger.outputs.should-release == 'true'
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [ -n "${{ needs.release.outputs.version }}" ] && [ "${{ needs.release.outputs.version }}" != "" ]; then
          VERSION="${{ needs.release.outputs.version }}"
          echo "Using semantic-release version: $VERSION"
        else
          VERSION="$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "Using fallback version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create release body
      run: |
        if [ -f "CHANGELOG.md" ] && [ -n "${{ needs.release.outputs.version }}" ]; then
          echo "Using CHANGELOG.md from semantic-release"
          echo "body_path=CHANGELOG.md" >> $GITHUB_ENV
        else
          echo "Creating fallback release notes"
          echo "Portfolio release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "üì± **Builds included:**" >> release_notes.md
          echo "- Android APK" >> release_notes.md
          echo "- iOS IPA (unsigned)" >> release_notes.md
          echo "- Web build" >> release_notes.md
          echo "- Linux build" >> release_notes.md
          echo "- Windows build" >> release_notes.md
          echo "- macOS build" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Commit:** ${{ github.sha }}" >> release_notes.md
          echo "**Commit message:** ${{ needs.check-release-trigger.outputs.commit-message }}" >> release_notes.md
          echo "body_path=release_notes.md" >> $GITHUB_ENV
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body_path: ${{ env.body_path }}
        files: |
          web-linux-android-builds/portfolio-web-${{ steps.version.outputs.version }}.zip
          web-linux-android-builds/portfolio-linux-${{ steps.version.outputs.version }}.tar.gz
          web-linux-android-builds/portfolio-android-${{ steps.version.outputs.version }}.apk
          web-linux-android-builds/portfolio-web-latest.zip
          web-linux-android-builds/portfolio-linux-latest.tar.gz
          web-linux-android-builds/portfolio-android-latest.apk
          windows-builds/portfolio-windows-${{ steps.version.outputs.version }}.zip
          windows-builds/portfolio-windows-latest.zip
          macos-ios-builds/portfolio-macos-${{ steps.version.outputs.version }}.tar.gz
          macos-ios-builds/portfolio-macos-latest.tar.gz
          macos-ios-builds/portfolio-ios-${{ steps.version.outputs.version }}.ipa
          macos-ios-builds/portfolio-ios-latest.ipa
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}